name: Check Multiple TestFlight Betas

on:
  schedule:
    - cron: "*/30 * * * *"
  workflow_dispatch:

jobs:
  check-betas:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      - name: Install dependencies
        run: npm install axios nodemailer fs-extra
      
      - name: Check TestFlight availability
        env:
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
          TO_EMAIL: ${{ secrets.TO_EMAIL }}
        run: |
          node <<'EOF'
          const axios = require('axios');
          const nodemailer = require('nodemailer');
          const fs = require('fs-extra');
          
          // Define the apps to monitor
          const apps = [
            {
              name: 'X',
              url: 'https://testflight.apple.com/join/8cHsaMrX',
              statusFile: 'status_x.txt'
            },
            {
              name: 'Telegram',
              url: 'https://testflight.apple.com/join/u6iogfd0',
              statusFile: 'status_telegram.txt'
            },
            {
              name: 'Duolingo',
              url: 'https://testflight.apple.com/join/Sq8bYSnJ',
              statusFile: 'status_duolingo.txt'
            },
            {
              name: 'Norton 360 Security VPN',
              url: 'https://testflight.apple.com/join/iHcEgAaT',
              statusFile: 'status_norton.txt'
            },
            {
              name: 'Call of Duty Mobile',
              url: 'https://testflight.apple.com/join/6rq9R7pT',
              statusFile: 'status_cod.txt'
            }
          ];
          
          async function checkTestFlightAvailability() {
            let emailNeeded = false;
            let emailBody = 'TestFlight Beta Status Update:\n\n';
            
            for (const app of apps) {
              try {
                // Fetch the TestFlight page
                const response = await axios.get(app.url, {
                  headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                  }
                });
                
                const content = response.data;
                
                // Check if the beta is full
                const isBetaFull = content.includes('This beta is full');
                
                // Determine message based on availability
                const status = isBetaFull ? 'Full' : 'Available';
                
                console.log(`${app.name} Status: ${status}`);
                
                // Check previous status
                let previousStatus = '';
                try {
                  if (await fs.pathExists(app.statusFile)) {
                    previousStatus = await fs.readFile(app.statusFile, 'utf8');
                  }
                } catch (err) {
                  console.error(`Error reading previous status for ${app.name}:`, err.message);
                }
                
                // Update status file
                await fs.writeFile(app.statusFile, status);
                
                // Add to email if status changed or beta is available
                if (status !== previousStatus || status === 'Available') {
                  emailNeeded = true;
                  emailBody += `${app.name}: ${status}\n`;
                  if (status === 'Available') {
                    emailBody += `Link: ${app.url}\n`;
                  }
                  emailBody += '\n';
                }
                
              } catch (error) {
                console.error(`Error checking ${app.name}:`, error.message);
                emailNeeded = true;
                emailBody += `Error checking ${app.name}: ${error.message}\n\n`;
              }
            }
            
            // Send email if needed
            if (emailNeeded) {
              await sendEmail('TestFlight Beta Status Update', emailBody);
              console.log('Email notification sent');
            } else {
              console.log('No changes in status, no email sent');
            }
          }
          
          async function sendEmail(subject, body) {
            const transporter = nodemailer.createTransport({
              service: 'gmail',
              auth: {
                user: process.env.EMAIL_USER,
                pass: process.env.EMAIL_PASS
              }
            });
            
            const mailOptions = {
              from: process.env.EMAIL_USER,
              to: process.env.TO_EMAIL,
              subject: subject,
              text: body
            };
            
            return transporter.sendMail(mailOptions);
          }
          
          checkTestFlightAvailability();
          EOF
      
      - name: Commit status files if changed
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add status_*.txt || true
          git commit -m "Update TestFlight statuses" || true
          git push || true
